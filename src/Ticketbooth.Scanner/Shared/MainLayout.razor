@inherits LayoutComponentBase

@using Services.Application
@using Eventing.Handlers

@implements IDisposable

@inject IJSRuntime _jsRuntime;
@inject IHealthChecker _healthChecker;
@inject TicketScanStateHandler neverDoThisPeople; /*TODO: Event aggregator*/

<div class="node-status @(_healthChecker.IsAvailable ? "success" : "failure")">
    <svg xmlns="http://www.w3.org/2000/svg"
         width="18" height="18"
         viewBox="0 0 24 24"
         fill="none"
         stroke="currentColor"
         stroke-width="1.5"
         stroke-linecap="round"
         stroke-linejoin="round"
         class="feather @($"feather-{(_healthChecker.IsAvailable ? "check" : "x")}-circle")">
        @if (_healthChecker.IsAvailable)
        {
            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
            <polyline points="22 4 12 14.01 9 11.01"></polyline>
        }
        else
        {
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="15" y1="9" x2="9" y2="15"></line>
            <line x1="9" y1="9" x2="15" y2="15"></line>
        }
    </svg>
    <span>@PrimaryMessage</span>
    <span>@SecondaryMessage</span>
</div>

<div class="content">
    @Body
</div>

@code {
    private string PrimaryMessage => _healthChecker.IsConnected ? _healthChecker.IsValid
        ? "Valid connection"
        : "Invalid connection"
        : "Disconnected";

    private string SecondaryMessage => _healthChecker.IsConnected
        ? $"Node v{_healthChecker.NodeVersion}"
        : "Ticket scanning unavailable";

    protected override void OnInitialized()
    {
        _healthChecker.OnPropertyChanged += async (s, e) => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("replaceIcons");
    }

    public void Dispose()
    {
        _healthChecker.OnPropertyChanged -= async (s, e) => await InvokeAsync(StateHasChanged);
    }
}